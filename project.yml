title: "transformer-based Target Answer Identification"
description: "Transformer based spacy model to identify possible answer sequences in the SQuAD or QUAC dataset"

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  config: "config"
  dataset: "quac"
  base_output_path: "/content/gdrive/MyDrive/mt-qg-data"
  assets_path: "${vars.base_output_path}/01_data/preprocessedData/${vars.dataset}/sentences_conll"
  model_path: "${vars.base_output_path}/00_models/spacy_target_answer/${vars.dataset}/training"
  metrics_path: "${vars.base_output_path}/00_models/spacy_target_answer/${vars.dataset}/metrics"
  gpu: 0

remotes:
  default: gs://galaxy-state/spacy-v3-benchmarks

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "metrics", "corpus"]

assets:
  - dest: "${vars.assets_path}/dev.conll"

workflows:
  all:
    - corpus
    - train
    - evaluate

commands:
  - name: init-config
    help: "Generate a default English NER config"
    script:
      - "python3 -m spacy init config --lang en --pipeline ner --optimize efficiency -C configs/${vars.config}.cfg"

  - name: corpus
    help: "Convert the data to spaCy's format"
    # Make sure we specify the branch in the command string, so that the
    # caching works correctly.
    script:
      - "python3 -m spacy convert ${vars.assets_path} corpus -c ner"
    deps:
        - "${vars.assets_path}/dev.conll"
    outputs:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "corpus/test.spacy"

  - name: train
    help: "Train the full pipeline"
    script:
      - "python3 -m spacy train configs/${vars.config}.cfg -o training/ --gpu-id ${vars.gpu} --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy --output ${vars.model_path}"
    deps:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "configs/${vars.config}.cfg"
    outputs:
      - "training/model-best"

  - name: evaluate
    help: "Evaluate on the test data and save the metrics"
    script:
      - "python -m spacy evaluate ${vars.model_path}/model-best ./corpus/test.spacy --output ${vars.metrics_path}/${vars.config}.json --gpu-id ${vars.gpu}"
    deps:
      - "${vars.model_path}/model-best"
      - "corpus/test.spacy"
    outputs:
      - "${vars.metrics_path}/${vars.config}.json"

  - name: clean
    help: "Remove intermediate files"
    script:
      - "rm -rf ${vars.model_path}/*"
      - "rm -rf ${vars.metrics_path}/*"
      - "rm -rf corpus/*"
